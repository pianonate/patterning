create PGraphicsSupplier to provide a record that says whether BeginDraw() has been called on UXBuffer
 so TextPanel.setFont can work without causing screen flicker
 and without using a try/catch block hack
 also we're doing resize detection in PatternDrawer and in Panel so this could be centralized on this record also

 offset sizes in getIcon need to come from UxThemeManager
 getControlPanels - duration of 2000 for the transition - don't hardcode

==============

make a KeyCallbackBuilder to make it easier to read the creation of these beasts
also make KeyHandler use Builder so that intellij doesn't think you have duplicated code

===============
slow down immediately to 1 frame per keypress / button press
===============
keep drawing while moving with the arrow keys if you can
===============

back the fuck up - pass along a method::methodName that provides the UXBuffer PGraphics that is current such as the new PGraphics getUXBuffer(); - or parent buffers for newly created children.

then all of these beasts will always return the current PGraphics - you might want to create an interface if you're
going to use more than one so they all have to conform...

then you don't have to go through the complexity of setting up your buffer the first time you get a draw

and draw methods don't have to pass around PGraphics buffers either...

==============

after that to debug the positioning of the text panels created by your new control,

create a new kind of ContainerPanel called an InformationRadiator that contains InformationPanels that each contain a left aligned name and right aligned value

you can display the information radiators anywhere on screen as they'll have a title window and - ideally you can reposition them and also close them
=============
todo: if !transitioning does it make sense to still call it?  can you let the control know when it's done and you can just image
      the thing at that point to save cpu cycles - might be trivial but it seems clean.  And then you could reinvoke reset if you wish
      to retransition ever

todo: next up - make TextPanel wordwrap it's text that is passed in from instantiating
                in Control constructor (I think) and then it should just draw itself and use the parent Transition capability
                that would be invoked by setting it up on the Control
                1. wordwrap - test at an arbitrary x,y, width, height - how can you make that obvious as a child of panel?
                2. test making it with a background color and a corner radius on the background.  controls have background colors and highlights that have radii but i don't think that's a generic capability for Panels to be highlighted, just controls.  but panels should have an optional radius as well as background color
                3. test that the textPanel can also have a transition applied
                4. fade in and fade out are transitions but only on the text itself, but a panel can have a transition
                   applied to it as well - how do you construct them commonly?  If a Panel has a transition such as fade
                   in and fade out, then it should be able to apply that to its children as well - so that the text can
                   just take advantage of the same transition amount (I think)

todo: cleanup any use of font that is not using the one on UXTheme
todo: encapsulate lifeForm drawing into a Panel which can receive and manage mouse events on itself so they
      can 'capture' the mouse events and release it in an intuitive way for the code

todo: should KeyHandler become a KeyEventManager just like MouseEventManager - as a Singleton with the similar pattern

todo: should we use futures instead of ComplexCalculationHandler?  it's a little more complicated but it's more standard and it's more flexible - you can cancel a future and you can get a result from it - and you can get a result from it with a timeout - which is what you want for the ComplexCalculationHandler

todo: an align panel should allow also for a TextPanel or an information radiator-
todo: DPS should increase by stepped values - can it be an algorithm or just a table?
todo: maximum volatility gun - why does it change the offset sometimes at very high generation speed
todo: figure the best way to get the font object
todo: create a text panel that can slide out from an info oldControl - same as a hover text, but when it's invoked
      the hover text goes away and the panel slides out - even if you're hovering, while the panel is being shown
      hovering is disallowed until you close the panel with by clicking on its close.
      the panel should be draggable

 todo: continue moving drawable stuff into UXConstants and UXDarkConstants (as appropriate)

todo: handle displaying fractional frame rates better (do it on a text panel)
todo: oldControl display orange when they can't go any further
todo: autofit to screen
todo: when you invoke a keyboard command associated with a oldControl - highlight the oldControl as if it had been clicked - highlight it for 500ms
todo: popout for movement oldControl - aligning to dimensions - sub control panel...
todo: make all icons the same size as the play oldControl...

todo: debug when turing machine gets big - what is taking its time to display as it stops and starts a lot
      to me it smells like garbage collection because you can speed it up substantially by reducing the number
      of living cells on screen.  what objects are involved to display all that on screen- certainly there is a bunch of
      BigDecimal, BigInteger activity - which could be reduced if you simply output a 2d binary array and then blasted that to the screen
      instead of the current mechanism. the challenge is that in order to understand how it maps to screen dimensions, you have to actually
      use the bounds of the universe coupled with the cell size to drill into the viewport that's visible.  there has to be another way to
      directly query to find the node corresponding to the visibly displayed universe

todo: debug maximum volatility gun - why is it that if you step very fast at the beginning (without clearing the undo cache), it loses coherence? (haven't been able to recently reproduce this - is it because it's running on its own thread? or steps are being handled better?
todo: show lifeForm stats in its slide out box
todo: notification that you have pasted with the name of the life form - above the countdown text and larger - with the name
todo: splash message "John Conway's Game Of Life" and if nothing loaded, tell'em what's happening
todo: magnifier over mouseX
todo: smooth combination of zoom/center
todo: decouple step management from speed management. use fast forward and rewind buttons to speed up slow down
todo: move all drawing into ux.PatternDrawer
todo: somewhere on the screen show fade in the target step and the current
     step until they're one and the same and then fade out
todo: move imagery around cached images into the ImageCacheEntry routine
todo: binary bit array - clearing - too complicated - needs to be on automatic or you'll screw up
todo: grid out the screen based on the pressed number key so you can see what level of the tree is that grid
todo: add RLE parser tests that can double as tests for the app
todo: reorganize the code for cleanliness and testing with 4.0's help
todo: click on node and it will tell you the information about it at the last selected grid level (or something)
         - maybe it recurses up to show info about all levels nearby
todo: show what level you have zoomed to using fade in face out text on screen
todo: indicate you have just done a rewind
todo: label bounding box with actual universe size in pixels and meters based on current cellSize - compare to what % of the known universe this would be in size
todo: create the mc in ux.PatternDrawer suitable to the 2^1024 possible width (maybe you don't need that) make it a constant so that you
todo: cache of Boolean array of any unchanged node that has visibility on screen of what is visible and what are its bounds and blast that out to the screen
todo: single step mode
todo: out of memory error
todo: use touch interface as it looks as if TOUCH is an enum in the KeyEvent class - maybe maybe... provide squeeze to zoom
todo: is it possible to bind keyboard shortcuts to methods?
todo: display keyboard shortcuts in a panel and allow for it to be moved around the screen
todo: move HUD to upper right with a panel with an expand/collapse
todo: display pasted in metadata in a HUD section
todo: smooth zoom - is that possible? seems to me it would have to be possible.
todo: detect periodic stability - it seems that the lastID stops growing in the model - is that the detector?
todo: Add mc parser support
todo: do you need to manage the size of the hashmap?
todo: possibly simplification create an alternate implementation - extend the hashmap class and override resize method to capture the timing of the resize
todo: here's what would be cool - zoom over a section - if your mouse is over a section of what's going on,
        you can see the details at a much higher zoom level
todo: save all pasted in valid RLEs in a folder. check if it's already there and if it's different.
todo: allow for creation and then saving as an RLE with associated metadata - from the same place where you allow editing
todo: allow for rotating the images for visual appeal
todo: copy / paste selections
todo: create a test for ux.PatternDrawer that allows you to know if it actually is improved in performance
todo: double click to zoom
todo: smooth zoom
todo: click for info
todo: directional big jump
todo: file manager of RLEs
todo: undo mouse moves? would it make sense to people
todo: paste logic - move to separate class to handle - just for the sake of keeping patterning.Patterning clean
OCTREE: https://github.com/thwegene/OCT/tree/master
